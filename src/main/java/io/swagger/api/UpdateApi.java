/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.InlineResponse200;
import io.swagger.model.InlineResponse400;
import io.swagger.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2018-12-08T19:00:38.207Z[GMT]")

@Api(value = "update", description = "the update API")
public interface UpdateApi {

    @ApiOperation(value = "Updates location", nickname = "updateLocationPost", notes = "Updates location of a user", response = InlineResponse200.class, tags={ "update", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Request success", response = InlineResponse200.class),
        @ApiResponse(code = 400, message = "Request failed", response = InlineResponse400.class) })
    @RequestMapping(value = "/update/location",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse200> updateLocationPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body);


    @ApiOperation(value = "Updates location", nickname = "updateUserPost", notes = "Updates location of a user", response = InlineResponse200.class, tags={ "update", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Request success", response = InlineResponse200.class),
        @ApiResponse(code = 400, message = "Request failed", response = InlineResponse400.class) })
    @RequestMapping(value = "/update/user",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse200> updateUserPost(@ApiParam(value = ""  )  @Valid @RequestBody User body);

}
