/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.InlineResponse200;
import io.swagger.model.InlineResponse400;
import io.swagger.model.Place;
import io.swagger.model.Route;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2018-12-08T19:00:38.207Z[GMT]")

@Api(value = "service", description = "the service API")
public interface ServiceApi {

    @ApiOperation(value = "Returns lists of places in radius", nickname = "serviceAccessiblePlacesPost", notes = "Returns list of all accesible places in radius", response = Place.class, responseContainer = "List", tags={ "service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Request success", response = Place.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Request failed", response = InlineResponse400.class) })
    @RequestMapping(value = "/service/accessiblePlaces",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<Place>> serviceAccessiblePlacesPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body);


    @ApiOperation(value = "Returns accesible route", nickname = "serviceAddCommentPost", notes = "Returns accesible rout", response = InlineResponse200.class, tags={ "service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Request success", response = InlineResponse200.class),
        @ApiResponse(code = 400, message = "Request failed", response = InlineResponse400.class) })
    @RequestMapping(value = "/service/addComment",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse200> serviceAddCommentPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body);


    @ApiOperation(value = "Returns accesible route", nickname = "serviceRoutesPost", notes = "Returns accesible rout", response = Route.class, responseContainer = "array", tags={ "service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Request success", response = Route.class, responseContainer = "array"),
        @ApiResponse(code = 400, message = "Request failed", response = InlineResponse400.class) })
    @RequestMapping(value = "/service/routes",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<Route>> serviceRoutesPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body);

}
